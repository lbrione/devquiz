---
import Layout from '../../layouts/Layout.astro'
import Arrow from '../../assets/icons/arrow.astro'

const { id } = Astro.params
const quizzes = await Astro.glob('../../quizzes/*.json')
const quiz = quizzes.find((quiz) => quiz.id === id)

if (!quiz) {
  return Astro.redirect('/')
}

export async function getStaticPaths(): Promise<{ params: { id: string } }[]> {
  const quizzes = await Astro.glob('../../quizzes/*.json')
  return quizzes.map((quiz) => ({
    params: { id: quiz.id },
  }))
}
---

<Layout title=`Quiz - ${quiz.name}`>
  <link rel="stylesheet" href="/js/glideText/glideText.css" />
  <div class="h-screen flex flex-col">
    <header class="flex items-center py-8 gap-5 text-white">
      <a class="w-12 h-12 fill-gray-400 hover:fill-white" href="/">
        <Arrow />
      </a>

      <article
        transition:name=`vt-${quiz.id}`
        class="flex gap-3 items-center overflow-hidden"
      >
        <figure class="w-8">
          <img src={quiz.image} alt=`"Icono de ${quiz.name}` />
        </figure>
        <h3>{quiz.name}</h3>
      </article>

      <p class="flex-grow text-right">
        <span class="quiz-counter">1</span>/{quiz.questions.length}
      </p>
    </header>

    <section
      class="section flex-grow justify-between flex flex-col items-center text-white py-10 max-h-[450px]"
    >
      <h2 class="quiz-question text-2xl text-center w-[min(700px,100%)]">
        {quiz.questions[0].question}
      </h2>
      <ul
        class="quiz-options flex flex-col gap-3 w-full items-center text-center *:w-[min(400px,100%)] *:border *:px-5 *:py-3 hover:*:scale-[1.05] hover:*:cursor-pointer hover:*:border-py-yellow hover:*:bg-yellow hover:*:text-black *:rounded-lg hover:*:font-bold"
      >
        {
          quiz.questions[0].options.map((op: string) => (
            <li data-op={op}>{op}</li>
          ))
        }
      </ul>
    </section>
  </div>
</Layout>

<style>
  ul li {
    transition-property: transform, color, background-color;
    transition-duration: 0.2s;
  }

  section {
    animation-name: show-question;
    animation-duration: 300ms;
    animation-delay: 300ms;
    animation-fill-mode: both;
  }

  @keyframes show-question {
    0% {
      opacity: 0;
      transform: translateY(-50%);
    }

    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script is:inline define:vars={{ questions: quiz.questions }} type="module">
  import { glideText } from '/js/glideText/glideText.js'

  const $counter = document.querySelector('.quiz-counter')
  const $question = document.querySelector('.quiz-question')
  const $options = document.querySelector('.quiz-options')

  const correctQuestions = []
  let currentQuestion = 0

  function chageQuestion() {
    glideText($counter, currentQuestion + 1)
    glideText($question, questions[currentQuestion].question, true)

    Array.from($options.children).forEach((elem, index) => {
      elem.dataset.op = questions[currentQuestion].options[index]
      glideText(elem, questions[currentQuestion].options[index])
    })
  }

  $options.addEventListener('click', ({ target }) => {
    if (target.tagName !== 'LI') {
      return
    }

    if (target.dataset.op === questions[currentQuestion].correctAnswer) {
      correctQuestions.push(questions[currentQuestion])
    }

    if (currentQuestion === questions.length - 1) {
      localStorage.setItem('devquizQuestions', JSON.stringify(correctQuestions))
      window.location.href = '/results'
      return
    }

    currentQuestion++
    chageQuestion()
  })
</script>
